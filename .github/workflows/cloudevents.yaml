name: cloudevents

on:
  pull_request:
    paths:
      - cloudevents/**
  push:
    tags:
      - "cloudevents/v*"

env:
  CLOUDEVENTS_IMAGE_NAME: cloudevents
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "adopt"
          cache: gradle
      - run: ./gradlew :cloudevents:clean :cloudevents:shadowJar --no-daemon

  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "adopt"
          cache: gradle

      - id: vars
        run: |
          echo "version=${GITHUB_REF#refs/tags/cloudevents/v}" >> "$GITHUB_OUTPUT"

      - run: ./gradlew :cloudevents:clean :cloudevents:shadowJar --no-daemon -Pversion=${{ steps.vars.outputs.version }}

      - name: Upload extension .jar to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: cloudevents/build/libs/cloudevents-*.jar
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Build image including extension's .jar
        uses: redhat-actions/buildah-build@v2
        id: build
        with:
          image: ${{ env.CLOUDEVENTS_IMAGE_NAME }}
          tags: ${{ steps.vars.outputs.version }}
          context: ./cloudevents/build/libs
          containerfiles: |
            ./cloudevents/Containerfile

      - name: Push image to GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Print push output
        run: echo "${{ toJSON(steps.push.outputs) }}"
